---
import React from "./icons/React.astro";
import Vite from "./icons/Vite.astro";
import Redux from "./icons/Redux.astro";
import SpringBoot from "./icons/SpringBoot.astro";
import Link from "./icons/Link.astro";
import LinkButton from "./LinkButton.astro";
import GitHub from "./icons/GitHub.astro";
import MaterialUI from "./icons/MaterialUI.astro";
import Java from "./icons/Java.astro";
import JavaScript from "./icons/JavaScript.astro";
import Docker from "./icons/Docker.astro";
import JWT from "./icons/JWT.astro";
import Vercel from "./icons/Vercel.astro";
import PostgreSQL from "./icons/PostgreSQL.astro";
import TypescriptIcon from "./icons/TypescriptIcon.astro";

const TAGS = {
  REACT: {
    name: "React.js",
    class: "bg-black text-white",
    icon: React,
  },

  VITE: {
    name: "Vite",
    class: "bg-black text-white",
    icon: Vite,
  },

  TYPESCRIPT: {
    name: "TypeScript",
    class: "bg-black text-white",
    icon: TypescriptIcon, 
  },

  REDUX: {
    name: "Redux",
    class: "bg-black text-white",
    icon: Redux,
  },

  SPRINGBOOT: {
    name: "SpringBoot",
    class: "bg-black text-white",
    icon: SpringBoot,
  },


  GITHUB: {
    name: "GitHub",
    class: "bg-black text-white",
    icon: GitHub,
  },


  JAVA: {
    name: "Java",
    class: "bg-black text-white",
    icon: Java,
  },

  JAVASCRIPT: {
    name: "JavaScript",
    class: "bg-black text-white",
    icon: JavaScript,
  },

  DOCKER: {
    name: "Docker",
    class: "bg-black text-white",
    icon: Docker,
  },

  JWT: {
    name: "JWT",
    class: "bg-black text-white",
    icon: JWT,
  },

  VERCEL: {
    name: "Vercel",
    class: "bg-black text-white",
    icon: Vercel,
  },

  POSTGRESQL: {
    name: "PostgreSQL",
    class: "bg-black text-white",
    icon: PostgreSQL,
  },
  
};
const PROJECTS = [
  {
    title: "Aplicación de Películas - Descubre, explora y disfruta del cine (Aplicación en desarrollo)",
    description: [
      "Esta aplicación está diseñada para los amantes del cine, proporcionando una plataforma intuitiva para buscar películas, dejar reseñas y mantenerse actualizado con los últimos estrenos.",
      "Tecnologías Utilizadas:",
      "Backend:",
      "Desarrollado en Java con Spring Boot, garantizando rendimiento y escalabilidad. Arquitectura basada en capas: repositorio, servicio y controlador. Implementación de DTOs para manejo eficiente de datos entre frontend y backend. Seguridad gestionada con Spring Boot Security y autenticación con JWT tokens. Base de datos gestionada con PostgreSQL, proporcionando integridad de datos y soporte para consultas complejas. Despliegue en contenedores usando Docker.",
      "Frontend:",
      "Creado en JavaScript con React, brindando una interfaz dinámica y responsiva. Integración con API externa para actualizaciones constantes de la base de datos de películas. Uso de Material UI para una experiencia visual consistente. Gestión de estado eficiente con Redux, mejorando la experiencia del usuario.",
    ],
    link: "https://app-peliculas-frontend.vercel.app/",
    github: "https://github.com/Casglez3/App-peliculas-backend",
    image: "/projects/app-peliculas3.webp",
    image2: "/projects/app-peliculas2.webp",
    tags: [TAGS.VITE, TAGS.REACT, TAGS.REDUX, TAGS.SPRINGBOOT, TAGS.GITHUB, TAGS.JAVA, TAGS.JAVASCRIPT, TAGS.DOCKER, TAGS.JWT, TAGS.VERCEL, TAGS.POSTGRESQL],
    github2: "https://github.com/Casglez3/App-peliculas-frontend",
  },
  {
    title: 'CryptoCurrent App',
    description: [ 'Check the current price of the most popular crypto currencies, in real time, in any of the most popular currencies in the world. '],
    link: 'https://cryptocurrentapp.netlify.app/',
    codigo: 'https://github.com/dabadema/React-y-Typescript/tree/main/crypto-react-typescript',
    image: './projects/crypto_screenshot_reduced.webp',
    tags: [TAGS.REACT, TAGS.TYPESCRIPT, TAGS.VITE],
        // [TAGS.REACT, TAGS.TYPESCRIPT, TAGS.ZOD, TAGS.VITE],
    },
];
---

<div class="flex flex-col gap-y-16">
  {
    PROJECTS.map(
      ({ image, title, description, tags, link, github, github2, codigo, image2 }) => (
        <article class="flex flex-col space-x-0 space-y-8 group md:flex-row md:space-x-8 md:space-y-0">
          <div class="w-full md:w-1/2 flex flex-col gap-4">
            {/* Tarjeta para la primera imagen */}
            <div class="relative flex flex-col items-center transition duration-500 ease-in-out transform shadow-xl overflow-clip rounded-xl sm:rounded-xl md:group-hover:-translate-y-1 md:group-hover:shadow-2xl lg:border lg:border-gray-800 lg:hover:border-gray-700 lg:hover:bg-gray-800/50">
              <img
                alt="Foto 1"
                class="object-cover object-top w-full h-56 transition duration-500 sm:h-full md:scale-110 md:group-hover:scale-105"
                loading="lazy"
                src={image}
              />
            </div>

            {/* Tarjeta para la segunda imagen (si existe) */}
            {image2 && (
              <div class="relative flex flex-col items-center transition duration-500 ease-in-out transform shadow-xl overflow-clip rounded-xl sm:rounded-xl md:group-hover:-translate-y-1 md:group-hover:shadow-2xl lg:border lg:border-gray-800 lg:hover:border-gray-700 lg:hover:bg-gray-800/50">
                <img
                  alt="Foto 2"
                  class="object-cover object-top w-full h-56 transition duration-500 sm:h-full md:scale-110 md:group-hover:scale-105"
                  loading="lazy"
                  src={image2}
                />
              </div>
            )}
          </div>

          <div class="w-full md:w-1/2 md:max-w-lg">
            <h3 class="text-2xl font-bold text-gray-800 dark:text-gray-100">
              {title}
            </h3>
            <div class="flex flex-wrap mt-2">
              <ul class="grid grid-cols-2 sm:grid-cols-4 gap-2 mb-2">
                {tags.map((tag) => (
                  <li>
                    <span
                      class={`flex gap-x-2 rounded-full text-xs ${tag.class} py-1 px-2 `}
                    >
                      <tag.icon class="size-4" />
                      {tag.name}
                    </span>
                  </li>
                ))}
              </ul>

              <div class="mt-2 text-gray-700 dark:text-gray-400 text-justify">
  {description.map((paragraph) => (
    <p>
      {paragraph === 'Tecnologías Utilizadas:' ? (
        <strong>{paragraph}</strong>
      ) : paragraph === 'Backend:' ? (
        <strong>{paragraph}</strong>
      ) : paragraph === 'Frontend:' ? (
        <strong>{paragraph}</strong>
      ) : (
        paragraph
      )}
    </p>
  ))}
</div>
              <footer class="flex items-end justify-start mt-4 gap-x-4">
                {github && (
                  <LinkButton href={github}>
                    <GitHub class="size-6" />
                    Backend
                  </LinkButton>
                )}

                {codigo && (
                  <LinkButton href={codigo}>
                    <GitHub class="size-6" />
                    Código
                  </LinkButton>
                )}

                {github2 && (
                  <LinkButton href={github2}>
                    <GitHub class="size-6" />
                    Frontend
                  </LinkButton>
                )}

                {link && (
                  <LinkButton href={link}>
                    <Link class="size-4" />
                    Vista previa
                  </LinkButton>
                )}
              </footer>
            </div>
          </div>
        </article>
      ),
    )
  }
</div>